enum UserSortByInput {
  _ID_ASC
  _ID_DESC
  ROLE_ASC
  ROLE_DESC
  USERID_ASC
  USERID_DESC
}

enum UserRole {
  ADMIN
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

scalar ObjectId

input UserInsertInput {
  userId: String
  _id: ObjectId
  role: UserRole
}

type Query {
  book(query: BookQueryInput): Book
  books(query: BookQueryInput, limit: Int = 100, sortBy: BookSortByInput): [Book]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
}

enum BookSortByInput {
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
  PRICE_DESC
  IMAGEURL_ASC
  _ID_ASC
  DESCRIPTION_DESC
  PRICE_ASC
  IMAGEURL_DESC
  DESCRIPTION_ASC
}

input BookInsertInput {
  description: String
  slug: String!
  title: String!
  authors: [String]!
  price: Float!
  imageUrl: String!
  _id: ObjectId
}

type DeleteManyPayload {
  deletedCount: Int!
}

input BookQueryInput {
  _id_nin: [ObjectId]
  slug_in: [String]
  AND: [BookQueryInput!]
  slug_ne: String
  _id_gt: ObjectId
  imageUrl_gte: String
  title_gt: String
  authors_in: [String]
  slug_exists: Boolean
  price_lte: Float
  title_in: [String]
  slug_nin: [String]
  slug_lt: String
  imageUrl_nin: [String]
  imageUrl_ne: String
  price_ne: Float
  OR: [BookQueryInput!]
  _id_in: [ObjectId]
  description_ne: String
  description_lte: String
  title_gte: String
  slug: String
  _id: ObjectId
  price_nin: [Float]
  title_lt: String
  imageUrl_in: [String]
  imageUrl: String
  imageUrl_exists: Boolean
  title: String
  price_gte: Float
  description_gte: String
  _id_lt: ObjectId
  slug_gte: String
  authors_exists: Boolean
  slug_gt: String
  price_lt: Float
  title_exists: Boolean
  description_gt: String
  price_exists: Boolean
  title_lte: String
  description_exists: Boolean
  description_lt: String
  price_gt: Float
  imageUrl_gt: String
  description_nin: [String]
  imageUrl_lt: String
  _id_ne: ObjectId
  title_ne: String
  authors: [String]
  price: Float
  _id_gte: ObjectId
  slug_lte: String
  description: String
  imageUrl_lte: String
  title_nin: [String]
  description_in: [String]
  _id_exists: Boolean
  authors_nin: [String]
  _id_lte: ObjectId
  price_in: [Float]
}

type Book {
  _id: ObjectId!
  authors: [String]!
  description: String
  imageUrl: String!
  price: Float!
  slug: String!
  title: String!
}

input BookUpdateInput {
  _id_unset: Boolean
  _id: ObjectId
  imageUrl: String
  imageUrl_unset: Boolean
  authors_unset: Boolean
  title_unset: Boolean
  slug_unset: Boolean
  title: String
  description: String
  price: Float
  description_unset: Boolean
  price_unset: Boolean
  slug: String
  authors: [String]
  price_inc: Float
}

input UserUpdateInput {
  role: UserRole
  role_unset: Boolean
  userId: String
  userId_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
}

type User {
  _id: ObjectId
  role: UserRole
  userId: String
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Mutation {
  deleteManyBooks(query: BookQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneBook(query: BookQueryInput!): Book
  deleteOneUser(query: UserQueryInput!): User
  insertManyBooks(data: [BookInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneBook(data: BookInsertInput!): Book
  insertOneUser(data: UserInsertInput!): User
  replaceOneBook(query: BookQueryInput, data: BookInsertInput!): Book
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyBooks(query: BookQueryInput, set: BookUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneBook(query: BookQueryInput, set: BookUpdateInput!): Book
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneBook(query: BookQueryInput, data: BookInsertInput!): Book
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}

input UserQueryInput {
  AND: [UserQueryInput!]
  userId_lte: String
  role_lte: UserRole
  _id_ne: ObjectId
  _id_gt: ObjectId
  role_lt: UserRole
  _id_gte: ObjectId
  role_ne: UserRole
  _id_in: [ObjectId]
  role_nin: [UserRole]
  role_gte: UserRole
  userId_ne: String
  _id_nin: [ObjectId]
  OR: [UserQueryInput!]
  userId_exists: Boolean
  role: UserRole
  role_in: [UserRole]
  userId_nin: [String]
  _id_lte: ObjectId
  role_gt: UserRole
  _id_lt: ObjectId
  userId: String
  _id_exists: Boolean
  userId_gte: String
  role_exists: Boolean
  userId_gt: String
  userId_in: [String]
  userId_lt: String
  _id: ObjectId
}
